#!/usr/bin/env python
# -*- coding: utf-8 -*-
import argparse
import difflib
import os
import random
import re
import select
import socket
import subprocess
import sys
import time
import urlparse

import phue
from ansi.colour.rgb import rgb256


CLOSENESS_STRICT = 0.6
CLOSENESS_LOOSE = 0.25


def die(msg):
    print >> sys.stderr, msg
    sys.exit(1)


def val2pct(v):
    """Convert a hue value in range [0, 254] to [0, 100]"""
    return float(v) / 254 * 100


def pct2val(pct):
    """Convert a percentage in range [0, 100] to [0, 254]"""
    return int(round(float(pct) / 100 * 254))


def barchart(pct, width=20):
    """Draw a unicode barchart based on percent value in range [0, 1]
    
   ██████████▁▁▁▁▁▁▁▁▁▁ 50% 
    """
    filled = int(round((float(pct) / 100) * width))
    return u'█' * filled + u'▁' * (width - filled) + ("%3d%%".rjust(9) % pct)


def grayscale_brightness(br_pct):
    if br_pct >= 80:
        return 'white'
    elif br_pct >= 40:
        return 'gray'
    else:
        return 'dim gray'


def print_light_status(light, off_color='dim gray', extra=''):
    if light.on:
        br_pct = val2pct(light.brightness)
        try:
            x, y = light.xy
        except:
            # Lights that don't support color, use brightness instead
            color = find_color_by_name(grayscale_brightness(br_pct))
        else:
            # Lights that support colors
            color = find_nearest_color_by_x_y(x, y)
    else:
        br_pct = 0
        color = find_color_by_name(off_color)

    parts = [light.name.ljust(20),  barchart(br_pct)]

    if light.on:
        parts.append(u'☀')

    if light.name == get_default_lightname():
        parts.append(u' (Default)')

    if extra:
        parts.append(extra)

    print_colorized(color,  ' '.join(parts))


def cmd_status(bridge, args):
    for light in  bridge.get_light_objects():
        print_light_status(light)


def find_by_closest_match(entries, match, closeness=CLOSENESS_LOOSE):
    """Case-insentive, substring search"""
    match = match.lower().replace(' ', '')
    lookup = {}
    for name, entry in entries:
        name = name.lower().replace(' ', '')
        lookup[name] = entry
    matches = difflib.get_close_matches(
            match, lookup.keys(), cutoff=closeness)
    if not matches:
        return None
    best = matches[0]
    return lookup[best]


def find_light_by_name(bridge, match, closeness=CLOSENESS_LOOSE):
    """Case-insentive, substring search"""
    entries = []
    for light in bridge.get_light_objects(mode='list'):
        entries.append((light.name, light))
    return find_by_closest_match(
            entries, match, closeness=closeness)


def each_light_arg(bridge, args):
    if args.args[0] == 'all':
        for light in  bridge.get_light_objects():
            yield light
    else:
        for match in args.args:
            light = find_light_by_name(bridge, match)
            if not light:
                die("error: unknown light '%s'" % match)
            yield light


def handle_default_light(bridge, args):
    use_default = False
    if args.args:
        # If first arg isn't a light, then use a default light, use a more
        # strict closeness value so we don't accidentally interpret something
        # as a light that isn't
        light = find_light_by_name(bridge, args.args[0],
                closeness=CLOSENESS_STRICT)
        if not light:
            use_default = True
    else:
        # If no args, use default light
        use_default = True

    if use_default:
        lightname = get_default_lightname()
        if lightname:
            light = find_light_by_name(bridge, lightname)
            if light:
                args.args.insert(0, light.name)
            else:
                die("error: unknown light '%s'" % lightname)
        else:
            die("No default light set, so you must specify a light")


def cmd_on(bridge, args):
    """hue on [all|light1 light2 ...]"""
    handle_default_light(bridge, args)
    for light in each_light_arg(bridge, args):
        if not light.on:
            if args.verbose:
                print "Turning on '{light}'".format(light=light.name)
            light.on = True
        print_light_status(light)


def cmd_off(bridge, args):
    """hue off [all|light1 light2 ...]"""
    handle_default_light(bridge, args)
    for light in each_light_arg(bridge, args):
        if light.on:
            if args.verbose:
                print "Turning off '{light}'".format(light=light.name)
            light.on = False
        print_light_status(light)


def cmd_dim(bridge, args):
    """hue dim <light> <pct>"""
    handle_default_light(bridge, args)
    match = " ".join(args.args[0:-1])
    try:
        pct = float(args.args[-1].replace('%', ''))
    except ValueError:
        die('usage: hue dim <light> <pct>')
    if not (0 <= pct <= 100):
        die('error: pct must be between 0 and 100')
    light = find_light_by_name(bridge, match)
    if pct == 0:
        light.on = False
    else:
        if not light.on:
            light.on = True
        light.brightness = pct2val(pct)
    if args.verbose:
        print "Dimming '{light}' to {pct}%".format(
                light=light.name, pct=pct)
    print_light_status(light)


def cmd_color(bridge, args):
    """hue color <light> <color>

    Set the color of a particular light
    """
    handle_default_light(bridge, args)
    lightname = args.args[0]
    light = find_light_by_name(bridge, lightname)
    if not light:
        die("error: unknown light '%s'" % lightname)
    colorname = " ".join(args.args[1:])
    color = find_color_by_name(colorname)
    if not color:
        die("error: unknown color '%s'" % colorname)
    if not light.on:
        light.on = True
    if args.verbose:
        print "Setting the color of '{light}' to '{color}'".format(
                light=light.name, color=color.name)
    light.xy = [color.x, color.y]
    print_light_status(light)


def cmd_funk(bridge, args):
    """hue funk <light> [duration]

    Randomly shift colors for a particular light. Default time between shift
    is 3 seconds.
    """
    handle_default_light(bridge, args)
    lightname = args.args[0]
    try:
        duration = float(args.args[1])
    except IndexError:
        duration = 3
    except ValueError:
        die("error: duration must be a number")
    light = find_light_by_name(bridge, lightname)
    if not light:
        die("error: unknown light '%s'" % lightname)
    if not light.on:
        light.on = True
    while True:
        color = find_color_by_name('random')
        if args.verbose:
            print "Setting the color of '{light}' to '{color}'".format(
                    light=light.name, color=color.name)
        light.xy = [color.x, color.y]
        if args.verbose:
            print_light_status(light)
        time.sleep(duration)


def cmd_colors(bridge, args):
    """hue colors

    Display available colors
    """
    for color in all_colors():
        print_colorized(color, color.name)


def get_idle_time():
    """Return the idle time of the computer in seconds.

    We shell out to the *system* Python just in case we're running inside a
    virtual environment which won't have the Quartz libraries linked in.
    """
    get_idle = "from Quartz.CoreGraphics import CGEventSourceSecondsSinceLastEventType as CG; print CG(1, int(4294967295))"
    output = subprocess.check_output(['/usr/bin/python', '-c', get_idle]).strip()
    try:
        return float(output)
    except ValueError:
        die("error: unexpected idle value, should be a number '{}'".format(
            output))


def cmd_auto(bridge, args):
    """hue auto <light> [duration]

    Automatically turn on/off a particular light based on whether this
    computer is idle or not. (MacOS only)

    The default idle time is 5 minutes.
    """
    handle_default_light(bridge, args)
    lightname = args.args[0]
    try:
        duration = float(args.args[1])
    except IndexError:
        duration = 5 * 60
    except ValueError:
        die("error: duration must be a number")
    light = find_light_by_name(bridge, lightname)
    if not light:
        die("error: unknown light '%s'" % lightname)
    while True:
        idle = get_idle_time()
        if idle >= duration:
            if light.on:
                if args.verbose:
                    print "Turning off '{light}'".format(light=light.name)
                light.on = False
        else:
            if not light.on:
                if args.verbose:
                    print "Turning on '{light}'".format(light=light.name)
                light.on = True
        if args.verbose:
            print_light_status(light, extra=u'(Idle: {:.1f}s)'.format(idle))
        time.sleep(1.0)


def cmd_help(bridge, args):
    if not args.args:
        die("usage: hue help <command>")
    cmd = args.args[0]
    try:
        func = CMD_DISPATCH_TABLE[cmd]
    except KeyError:
        die("error: unknown command '{cmd}'".format(cmd=cmd))
    print "usage: " + func.__doc__


def get_default_lightname():
    path = os.path.expanduser('~/.hue/default-light')
    if not os.path.exists(path):
        return None
    with open(path) as f:
        return f.read().strip()


def cmd_default(bridge, args):
    """hue default [light]

    Set or display the default light.
    """
    if len(args.args):
        # Set default light
        hue_dir = os.path.expanduser('~/.hue')
        if not os.path.exists(hue_dir):
            os.mkdir(hue_dir)
        path = os.path.join(hue_dir, 'default-light')
        light = find_light_by_name(bridge, args.args[0])
        if not light:
            die("error: unknown light '%s'" % lightname)
        if args.verbose:
            print "Setting default light to '{light}'".format(
                    light=light.name)
        with open(path, 'w') as f:
            f.write(light.name + '\n')
    else:
        lightname = get_default_lightname()
        light = find_light_by_name(bridge, lightname)
        if not light:
            die("error: unknown light '%s'" % lightname)
    if light:
        print_light_status(light)
    else:
        print "No default light set"


class Color(object):
    def __init__(self, name, r, g, b, x, y):
        self.name = name
        self.r = r
        self.g = g
        self.b = b
        self.x = x
        self.y = y

    def __repr__(self):
        return '<Color %s>' % self.name


_COLOR_TABLE = []


def print_colorized(color, msg):
        print rgb256(color.r, color.g, color.b) + msg + u'\x1b[0m'


def init_color_table():
    if _COLOR_TABLE:
        return
    RE_COLOR = re.compile('(.*)(\(.*\))\s+(\[.*\])\s+(\[.*\])\s+(\[.*\])')
    for line in COLOR_DATA.splitlines():
        name, rgb, gam_a, gam_b, gam_c =  RE_COLOR.match(line).groups()
        name = name.strip()
        r, g, b =  map(int, rgb.replace('(', '').replace(')', '').split(','))
        x, y = map(float, gam_b.replace('[', '').replace(']', '').split(','))
        _COLOR_TABLE.append(Color(name, r, g, b, x, y))


def all_colors():
    init_color_table()
    return _COLOR_TABLE


def find_color_by_name(match):
    """Case-insentive, substring search"""
    init_color_table()
    if match.lower() == 'random':
        return random.choice(_COLOR_TABLE)
    entries = []
    for color in _COLOR_TABLE:
        entries.append((color.name, color))
    return find_by_closest_match(entries, match)


def find_nearest_color_by_x_y(x, y):
    """Find the color in the table nearest this xy color"""
    init_color_table()
    scores = []
    for color in _COLOR_TABLE:
        # Hue color data has black == blue in the xy colorspace; since we don't
        # really ever want to return a black color, just skip it
        if color.name.lower() == 'black':
            continue
        delta = abs((color.x - x) + (color.y - y))
        scores.append((delta, color))
    scores.sort()
    return scores[0][1]


def discover_hue_bridge_ip(timeout=30.0):
    """Use UPnP to discover the Hue IP"""
    SSDP_ADDR = "239.255.255.250"
    SSDP_PORT = 1900
    SSDP_MX = 1
    SSDP_ST = 'upnp:rootdevice'

    ssdpRequest = "M-SEARCH * HTTP/1.1\r\n" + \
                    "HOST: %s:%d\r\n" % (SSDP_ADDR, SSDP_PORT) + \
                    "MAN: \"ssdp:discover\"\r\n" + \
                    "MX: %d\r\n" % (SSDP_MX, ) + \
                    "ST: %s\r\n" % (SSDP_ST, ) + "\r\n"

    start = time.time()
    while True:
        if (time.time() - start) > timeout:
            return None
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        except socket.error, msg:
            continue
        sock.sendto(ssdpRequest, (SSDP_ADDR, SSDP_PORT))
        sock.setblocking(0)
        ready = select.select([sock], [], [], 10)
        if ready[0]:
            data = sock.recv(4096)
            headers = {}
            for line in data.split("\r\n")[1:]:
                if not line:
                    continue
                key, val = line.split(':', 1)
                headers[key.strip()] = val.strip()
            if 'hue-bridgeid' in headers:
                netloc = urlparse.urlparse(headers['LOCATION']).netloc
                ip = netloc.split(':')[0]
                return ip


CMD_DISPATCH_TABLE = {}


def main():
    for name, func in globals().iteritems():
        if name.startswith('cmd_'):
            name = name.replace('cmd_', '')
            CMD_DISPATCH_TABLE[name] = func

    parser = argparse.ArgumentParser()
    parser.add_argument('cmd', nargs='?',
                        choices=sorted(CMD_DISPATCH_TABLE.keys()))
    parser.add_argument('args', nargs='*')
    parser.add_argument('-b', '--bridge', help='IP of Hue Bridge')
    parser.add_argument('-v', '--verbose', action='store_true', help='Verbose mode')
    args = parser.parse_args()
    # Bridge is found using these methods (in order of preference)
    # 1) --bridge option
    # 2) Saved configuration file
    # 3) UPnP discovery
    try:
        bridge = phue.Bridge(args.bridge)
    except:
        if args.bridge:
            die('error: press button on Hue bridge and re-run to register app')
        else:
            print 'Scanning for Hue...'
            bridge_ip = discover_hue_bridge_ip()
            if bridge_ip:
                print 'Found it at %s' % bridge_ip
            else:
                die("error: Could not find Hue")
            try:
                bridge = phue.Bridge(bridge_ip)
            except:
                die('error: press button on Hue bridge and re-run to register app')

    if args.cmd:
        try:
            func = CMD_DISPATCH_TABLE[args.cmd]
        except KeyError:
            die("error: Unknown command '{}'".format(args.cmd))
        else:
            func(bridge, args)
    else:
        cmd_status(bridge, args)


# Taken from http://www.developers.meethue.com/documentation/hue-xy-values
# Name    R,G,B   [XY] - Gamut A  [XY] - Gamut B  [XY] - Gamut C
COLOR_DATA = """\
Alice Blue  (239,247,255)   [0.3088,0.3212] [0.3092,0.321]  [0.3088,0.3212]
Antique White   (249,234,214)   [0.3548,0.3489] [0.3548,0.3489] [0.3548,0.3489]
Aqua    (0,255,255) [0.17,0.3403]   [0.2858,0.2747] [0.1607,0.3423]
Aquamarine  (127,255,211)   [0.2138,0.4051] [0.3237,0.3497] [0.2138,0.4051]
Azure   (239,255,255)   [0.3059,0.3303] [0.3123,0.3271] [0.3059,0.3303]
Beige   (244,244,219)   [0.3402,0.356]  [0.3402,0.356]  [0.3402,0.356]
Bisque  (255,226,196)   [0.3806,0.3576] [0.3806,0.3576] [0.3806,0.3576]
Black   (0,0,0) [0.139,0.081]   [0.168,0.041]   [0.153,0.048]
Blanched Almond (255,234,204)   [0.3695,0.3584] [0.3695,0.3584] [0.3695,0.3584]
Blue    (0,0,255)   [0.139,0.081]   [0.168,0.041]   [0.153,0.048]
Blue Violet (137,43,226)    [0.245,0.1214]  [0.251,0.1056]  [0.251,0.1056]
Brown   (165,40,40) [0.6399,0.3041] [0.6399,0.3041] [0.6399,0.3041]
Burlywood   (221,183,135)   [0.4236,0.3811] [0.4236,0.3811] [0.4236,0.3811]
Cadet Blue  (94,158,160)    [0.2211,0.3328] [0.2961,0.295]  [0.2211,0.3328]
Chartreuse  (127,255,0) [0.2682,0.6632] [0.408,0.517]   [0.2505,0.6395]
Chocolate   (209,104,30)    [0.6009,0.3684] [0.6009,0.3684] [0.6009,0.3684]
Coral   (255,127,79)    [0.5763,0.3486] [0.5763,0.3486] [0.5763,0.3486]
Cornflower  (99,147,237)    [0.1905,0.1945] [0.2343,0.1725] [0.1905,0.1945]
Cornsilk    (255,247,219)   [0.3511,0.3574] [0.3511,0.3574] [0.3511,0.3574]
Crimson (219,20,61) [0.6531,0.2834] [0.6417,0.304]  [0.6508,0.2881]
Cyan    (0,255,255) [0.17,0.3403]   [0.2858,0.2747] [0.1607,0.3423]
Dark Blue   (0,0,140)   [0.139,0.081]   [0.168,0.041]   [0.153,0.048]
Dark Cyan   (0,140,140) [0.17,0.3403]   [0.2858,0.2747] [0.1607,0.3423]
Dark Goldenrod  (183,135,10)    [0.5265,0.4428] [0.5204,0.4346] [0.5214,0.4361]
Dark Gray   (168,168,168)   [0.3227,0.329]  [0.3227,0.329]  [0.3227,0.329]
Dark Green  (0,99,0)    [0.214,0.709]   [0.408,0.517]   [0.17,0.7]
Dark Khaki  (188,183,107)   [0.4004,0.4331] [0.4004,0.4331] [0.4004,0.4331]
Dark Magenta    (140,0,140) [0.3787,0.1724] [0.3824,0.1601] [0.3833,0.1591]
Dark Olive Green    (84,107,45) [0.3475,0.5047] [0.3908,0.4829] [0.3475,0.5047]
Dark Orange (255,140,0) [0.5951,0.3872] [0.5916,0.3824] [0.5921,0.3831]
Dark Orchid (153,51,204)    [0.296,0.1409]  [0.2986,0.1341] [0.2986,0.1341]
Dark Red    (140,0,0)   [0.7,0.2986]    [0.674,0.322]   [0.692,0.308]
Dark Salmon (232,150,122)   [0.4837,0.3479] [0.4837,0.3479] [0.4837,0.3479]
Dark Sea Green  (142,188,142)   [0.2924,0.4134] [0.3429,0.3879] [0.2924,0.4134]
Dark Slate Blue (71,61,140) [0.2206,0.1484] [0.2218,0.1477] [0.2206,0.1484]
Dark Slate Gray (45,79,79)  [0.2239,0.3368] [0.2982,0.2993] [0.2239,0.3368]
Dark Turquoise  (0,206,209) [0.1693,0.3347] [0.2835,0.2701] [0.1605,0.3366]
Dark Violet (147,0,211) [0.2742,0.1326] [0.2836,0.1079] [0.2824,0.1104]
Deep Pink   (255,20,147)    [0.5454,0.2359] [0.5386,0.2468] [0.5445,0.2369]
Deep Sky Blue   (0,191,255) [0.1576,0.2368] [0.2428,0.1893] [0.158,0.2379]
Dim Gray    (104,104,104)   [0.3227,0.329]  [0.3227,0.329]  [0.3227,0.329]
Dodger Blue (30,142,255)    [0.1484,0.1599] [0.2115,0.1273] [0.1559,0.1599]
Firebrick   (178,33,33) [0.6621,0.3023] [0.6566,0.3123] [0.6621,0.3023]
Floral White    (255,249,239)   [0.3361,0.3388] [0.3361,0.3388] [0.3361,0.3388]
Forest Green    (33,140,33) [0.2097,0.6732] [0.408,0.517]   [0.1984,0.6746]
Fuchsia (255,0,255) [0.3787,0.1724] [0.3824,0.1601] [0.3833,0.1591]
Gainsboro   (219,219,219)   [0.3227,0.329]  [0.3227,0.329]  [0.3227,0.329]
Ghost White (247,247,255)   [0.3174,0.3207] [0.3174,0.3207] [0.3174,0.3207]
Gold    (255,214,0) [0.4947,0.472]  [0.4859,0.4599] [0.4871,0.4618]
Goldenrod   (216,165,33)    [0.5136,0.4444] [0.5113,0.4413] [0.5125,0.4428]
Gray    (191,191,191)   [0.3227,0.329]  [0.3227,0.329]  [0.3227,0.329]
Web Gray    (127,127,127)   [0.3227,0.329]  [0.3227,0.329]  [0.3227,0.329]
Green   (0,255,0)   [0.214,0.709]   [0.408,0.517]   [0.17,0.7]
Web Green   (0,127,0)   [0.214,0.709]   [0.408,0.517]   [0.17,0.7]
Green Yellow    (173,255,45)    [0.3298,0.5959] [0.408,0.517]   [0.3221,0.5857]
Honeydew    (239,255,239)   [0.316,0.3477]  [0.3213,0.345]  [0.316,0.3477]
Hot Pink    (255,104,181)   [0.4682,0.2452] [0.4682,0.2452] [0.4682,0.2452]
Indian Red  (204,91,91) [0.5488,0.3112] [0.5488,0.3112] [0.5488,0.3112]
Indigo  (73,0,130)  [0.2332,0.1169] [0.2437,0.0895] [0.2428,0.0913]
Ivory   (255,255,239)   [0.3334,0.3455] [0.3334,0.3455] [0.3334,0.3455]
Khaki   (239,229,140)   [0.4019,0.4261] [0.4019,0.4261] [0.4019,0.4261]
Lavender    (229,229,249)   [0.3085,0.3071] [0.3085,0.3071] [0.3085,0.3071]
Lavender Blush  (255,239,244)   [0.3369,0.3225] [0.3369,0.3225] [0.3369,0.3225]
Lawn Green  (124,252,0) [0.2663,0.6649] [0.408,0.517]   [0.2485,0.641]
Lemon Chiffon   (255,249,204)   [0.3608,0.3756] [0.3608,0.3756] [0.3608,0.3756]
Light Blue  (173,216,229)   [0.2621,0.3157] [0.2975,0.2979] [0.2621,0.3157]
Light Coral (239,127,127)   [0.5075,0.3145] [0.5075,0.3145] [0.5075,0.3145]
Light Cyan  (224,255,255)   [0.2901,0.3316] [0.3096,0.3218] [0.2901,0.3316]
Light Goldenrod (249,249,209)   [0.3504,0.3717] [0.3504,0.3717] [0.3504,0.3717]
Light Gray  (211,211,211)   [0.3227,0.329]  [0.3227,0.329]  [0.3227,0.329]
Light Green (142,237,142)   [0.2648,0.4901] [0.3682,0.438]  [0.2648,0.4901]
Light Pink  (255,181,193)   [0.4112,0.3091] [0.4112,0.3091] [0.4112,0.3091]
Light Salmon    (255,160,122)   [0.5016,0.3531] [0.5016,0.3531] [0.5016,0.3531]
Light Sea Green (33,178,170)    [0.1721,0.358]  [0.2946,0.292]  [0.1611,0.3593]
Light Sky Blue  (135,206,249)   [0.214,0.2749]  [0.2714,0.246]  [0.214,0.2749]
Light Slate Gray    (119,135,153)   [0.2738,0.297]  [0.2924,0.2877] [0.2738,0.297]
Light Steel Blue    (175,196,221)   [0.276,0.2975]  [0.293,0.2889]  [0.276,0.2975]
Light Yellow    (255,255,224)   [0.3436,0.3612] [0.3436,0.3612] [0.3436,0.3612]
Lime    (0,255,0)   [0.214,0.709]   [0.408,0.517]   [0.17,0.7]
Lime Green  (51,204,51) [0.2101,0.6765] [0.408,0.517]   [0.1972,0.6781]
Linen   (249,239,229)   [0.3411,0.3387] [0.3411,0.3387] [0.3411,0.3387]
Magenta (255,0,255) [0.3787,0.1724] [0.3824,0.1601] [0.3833,0.1591]
Maroon  (175,48,96) [0.5383,0.2566] [0.5383,0.2566] [0.5383,0.2566]
Web Maroon  (127,0,0)   [0.7,0.2986]    [0.674,0.322]   [0.692,0.308]
Medium Aquamarine   (102,204,170)   [0.215,0.4014]  [0.3224,0.3473] [0.215,0.4014]
Medium Blue (0,0,204)   [0.139,0.081]   [0.168,0.041]   [0.153,0.048]
Medium Orchid   (186,84,211)    [0.3365,0.1735] [0.3365,0.1735] [0.3365,0.1735]
Medium Purple   (147,112,219)   [0.263,0.1773]  [0.263,0.1773]  [0.263,0.1773]
Medium Sea Green    (61,178,112)    [0.1979,0.5005] [0.3588,0.4194] [0.1979,0.5005]
Medium Slate Blue   (122,104,237)   [0.2179,0.1424] [0.2189,0.1419] [0.2179,0.1424]
Medium Spring Green (0,249,153) [0.1919,0.524]  [0.3622,0.4262] [0.1655,0.5275]
Medium Turquoise    (71,209,204)    [0.176,0.3496]  [0.2937,0.2903] [0.176,0.3496]
Medium Violet Red   (198,20,132)    [0.504,0.2201]  [0.5002,0.2255] [0.5047,0.2177]
Midnight Blue   (25,25,112) [0.1585,0.0884] [0.1825,0.0697] [0.1616,0.0802]
Mint Cream  (244,255,249)   [0.315,0.3363]  [0.3165,0.3355] [0.315,0.3363]
Misty Rose  (255,226,224)   [0.3581,0.3284] [0.3581,0.3284] [0.3581,0.3284]
Moccasin    (255,226,181)   [0.3927,0.3732] [0.3927,0.3732] [0.3927,0.3732]
Navajo White    (255,221,173)   [0.4027,0.3757] [0.4027,0.3757] [0.4027,0.3757]
Navy Blue   (0,0,127)   [0.139,0.081]   [0.168,0.041]   [0.153,0.048]
Old Lace    (252,244,229)   [0.3421,0.344]  [0.3421,0.344]  [0.3421,0.344]
Olive   (127,127,0) [0.4432,0.5154] [0.4317,0.4996] [0.4334,0.5022]
Olive Drab  (107,142,35)    [0.354,0.5561]  [0.408,0.517]   [0.354,0.5561]
Orange  (255,165,0) [0.5614,0.4156] [0.5562,0.4084] [0.5569,0.4095]
Orange Red  (255,68,0)  [0.6726,0.3217] [0.6733,0.3224] [0.6731,0.3222]
Orchid  (216,112,214)   [0.3688,0.2095] [0.3688,0.2095] [0.3688,0.2095]
Pale Goldenrod  (237,232,170)   [0.3751,0.3983] [0.3751,0.3983] [0.3751,0.3983]
Pale Green  (153,249,153)   [0.2675,0.4826] [0.3657,0.4331] [0.2675,0.4826]
Pale Turquoise  (175,237,237)   [0.2539,0.3344] [0.3034,0.3095] [0.2539,0.3344]
Pale Violet Red (219,112,147)   [0.4658,0.2773] [0.4658,0.2773] [0.4658,0.2773]
Papaya Whip (255,239,214)   [0.3591,0.3536] [0.3591,0.3536] [0.3591,0.3536]
Peach Puff  (255,216,186)   [0.3953,0.3564] [0.3953,0.3564] [0.3953,0.3564]
Peru    (204,132,63)    [0.5305,0.3911] [0.5305,0.3911] [0.5305,0.3911]
Pink    (255,191,204)   [0.3944,0.3093] [0.3944,0.3093] [0.3944,0.3093]
Plum    (221,160,221)   [0.3495,0.2545] [0.3495,0.2545] [0.3495,0.2545]
Powder Blue (175,224,229)   [0.262,0.3269]  [0.302,0.3068]  [0.262,0.3269]
Purple  (160,33,239)    [0.2651,0.1291] [0.2725,0.1096] [0.2725,0.1096]
Web Purple  (127,0,127) [0.3787,0.1724] [0.3824,0.1601] [0.3833,0.1591]
Rebecca Purple  (102,51,153)    [0.2703,0.1398] [0.2703,0.1398] [0.2703,0.1398]
Red (255,0,0)   [0.7,0.2986]    [0.674,0.322]   [0.692,0.308]
Rosy Brown  (188,142,142)   [0.4026,0.3227] [0.4026,0.3227] [0.4026,0.3227]
Royal Blue  (63,104,224)    [0.1649,0.1338] [0.2047,0.1138] [0.1649,0.1338]
Saddle Brown    (140,68,17) [0.5993,0.369]  [0.5993,0.369]  [0.5993,0.369]
Salmon  (249,127,114)   [0.5346,0.3247] [0.5346,0.3247] [0.5346,0.3247]
Sandy Brown (244,163,96)    [0.5104,0.3826] [0.5104,0.3826] [0.5104,0.3826]
Sea Green   (45,140,86) [0.1968,0.5047] [0.3602,0.4223] [0.1968,0.5047]
Seashell    (255,244,237)   [0.3397,0.3353] [0.3397,0.3353] [0.3397,0.3353]
Sienna  (160,81,45) [0.5714,0.3559] [0.5714,0.3559] [0.5714,0.3559]
Silver  (191,191,191)   [0.3227,0.329]  [0.3227,0.329]  [0.3227,0.329]
Sky Blue    (135,206,234)   [0.2206,0.2948] [0.2807,0.2645] [0.2206,0.2948]
Slate Blue  (107,89,204)    [0.2218,0.1444] [0.2218,0.1444] [0.2218,0.1444]
Slate Gray  (112,127,142)   [0.2762,0.3009] [0.2944,0.2918] [0.2762,0.3009]
Snow    (255,249,249)   [0.3292,0.3285] [0.3292,0.3285] [0.3292,0.3285]
Spring Green    (0,255,127) [0.1994,0.5864] [0.3882,0.4777] [0.1671,0.5906]
Steel Blue  (68,130,181)    [0.183,0.2325]  [0.248,0.1997]  [0.183,0.2325]
Tan (209,181,140)   [0.4035,0.3772] [0.4035,0.3772] [0.4035,0.3772]
Teal    (0,127,127) [0.17,0.3403]   [0.2858,0.2747] [0.1607,0.3423]
Thistle (216,191,216)   [0.3342,0.2971] [0.3342,0.2971] [0.3342,0.2971]
Tomato  (255,99,71) [0.6112,0.3261] [0.6112,0.3261] [0.6112,0.3261]
Turquoise   (63,224,209)    [0.1732,0.3672] [0.2997,0.3022] [0.1702,0.3675]
Violet  (237,130,237)   [0.3644,0.2133] [0.3644,0.2133] [0.3644,0.2133]
Wheat   (244,221,178)   [0.3852,0.3737] [0.3852,0.3737] [0.3852,0.3737]
White   (255,255,255)   [0.3227,0.329]  [0.3227,0.329]  [0.3227,0.329]
White Smoke (244,244,244)   [0.3227,0.329]  [0.3227,0.329]  [0.3227,0.329]
Yellow  (255,255,0) [0.4432,0.5154] [0.4317,0.4996] [0.4334,0.5022]
Yellow Green    (153,204,51)    [0.3517,0.5618] [0.408,0.517]   [0.3517,0.5618]
"""

if __name__ == '__main__':
    main()
